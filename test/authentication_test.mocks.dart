// Mocks generated by Mockito 5.0.16 from annotations
// in dart_authentication_service/test/authentication_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dart_authentication_service/dart_authentication_service.dart'
    as _i3;
import 'package:dart_authentication_service/src/authentication_result.dart'
    as _i2;
import 'package:dart_authentication_service/src/user.dart' as _i5;
import 'package:hive/hive.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAuthenticationResult_0 extends _i1.Fake
    implements _i2.AuthenticationResult {}

class _FakeAuthenticationAttributesResult_1 extends _i1.Fake
    implements _i2.AuthenticationAttributesResult {}

/// A class which mocks [CognitoProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockCognitoProvider extends _i1.Mock implements _i3.CognitoProvider {
  MockCognitoProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.AuthenticationResult> isLoggedIn(_i5.User? user) =>
      (super.noSuchMethod(Invocation.method(#isLoggedIn, [user]),
              returnValue: Future<_i2.AuthenticationResult>.value(
                  _FakeAuthenticationResult_0()))
          as _i4.Future<_i2.AuthenticationResult>);
  @override
  _i4.Future<_i2.AuthenticationResult> logIn(
          {String? username, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #logIn, [], {#username: username, #password: password}),
              returnValue: Future<_i2.AuthenticationResult>.value(
                  _FakeAuthenticationResult_0()))
          as _i4.Future<_i2.AuthenticationResult>);
  @override
  _i4.Future<_i2.AuthenticationResult> createUser(
          {String? username,
          String? password,
          Map<String, String>? properties}) =>
      (super.noSuchMethod(
              Invocation.method(#createUser, [], {
                #username: username,
                #password: password,
                #properties: properties
              }),
              returnValue: Future<_i2.AuthenticationResult>.value(
                  _FakeAuthenticationResult_0()))
          as _i4.Future<_i2.AuthenticationResult>);
  @override
  _i4.Future<_i2.AuthenticationResult> resendVerificationCode(
          {String? username}) =>
      (super.noSuchMethod(
          Invocation.method(#resendVerificationCode, [], {#username: username}),
          returnValue: Future<_i2.AuthenticationResult>.value(
              _FakeAuthenticationResult_0())) as _i4
          .Future<_i2.AuthenticationResult>);
  @override
  _i4.Future<_i2.AuthenticationResult> verifyUser(
          {String? username, String? code}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #verifyUser, [], {#username: username, #code: code}),
              returnValue: Future<_i2.AuthenticationResult>.value(
                  _FakeAuthenticationResult_0()))
          as _i4.Future<_i2.AuthenticationResult>);
  @override
  _i4.Future<_i2.AuthenticationResult> refreshSession({_i5.User? user}) =>
      (super.noSuchMethod(Invocation.method(#refreshSession, [], {#user: user}),
              returnValue: Future<_i2.AuthenticationResult>.value(
                  _FakeAuthenticationResult_0()))
          as _i4.Future<_i2.AuthenticationResult>);
  @override
  _i4.Future<_i2.AuthenticationResult> logOut() =>
      (super.noSuchMethod(Invocation.method(#logOut, []),
              returnValue: Future<_i2.AuthenticationResult>.value(
                  _FakeAuthenticationResult_0()))
          as _i4.Future<_i2.AuthenticationResult>);
  @override
  _i4.Future<_i2.AuthenticationResult> requestPasswordReset(
          {String? username}) =>
      (super.noSuchMethod(
          Invocation.method(#requestPasswordReset, [], {#username: username}),
          returnValue: Future<_i2.AuthenticationResult>.value(
              _FakeAuthenticationResult_0())) as _i4
          .Future<_i2.AuthenticationResult>);
  @override
  _i4.Future<_i2.AuthenticationResult> setPassword(
          {_i5.User? user, String? code, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#setPassword, [],
                  {#user: user, #code: code, #password: password}),
              returnValue: Future<_i2.AuthenticationResult>.value(
                  _FakeAuthenticationResult_0()))
          as _i4.Future<_i2.AuthenticationResult>);
  @override
  _i4.Future<_i2.AuthenticationResult> changePassword(
          {_i5.User? user, String? oldPassword, String? newPassword}) =>
      (super.noSuchMethod(
              Invocation.method(#changePassword, [], {
                #user: user,
                #oldPassword: oldPassword,
                #newPassword: newPassword
              }),
              returnValue: Future<_i2.AuthenticationResult>.value(
                  _FakeAuthenticationResult_0()))
          as _i4.Future<_i2.AuthenticationResult>);
  @override
  _i4.Future<_i2.AuthenticationAttributesResult> getUserAttributes() =>
      (super.noSuchMethod(Invocation.method(#getUserAttributes, []),
              returnValue: Future<_i2.AuthenticationAttributesResult>.value(
                  _FakeAuthenticationAttributesResult_1()))
          as _i4.Future<_i2.AuthenticationAttributesResult>);
  @override
  _i4.Future<_i2.AuthenticationAttributesResult> getAttributeVerificationCode(
          {String? attribute}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getAttributeVerificationCode, [], {#attribute: attribute}),
              returnValue: Future<_i2.AuthenticationAttributesResult>.value(
                  _FakeAuthenticationAttributesResult_1()))
          as _i4.Future<_i2.AuthenticationAttributesResult>);
  @override
  _i4.Future<_i2.AuthenticationAttributesResult> verifyAttribute(
          {String? attribute, String? code}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #verifyAttribute, [], {#attribute: attribute, #code: code}),
              returnValue: Future<_i2.AuthenticationAttributesResult>.value(
                  _FakeAuthenticationAttributesResult_1()))
          as _i4.Future<_i2.AuthenticationAttributesResult>);
  @override
  _i4.Future<_i2.AuthenticationAttributesResult> updateAttributes(
          {Map<String, dynamic>? attributes}) =>
      (super.noSuchMethod(
          Invocation.method(#updateAttributes, [], {#attributes: attributes}),
          returnValue: Future<_i2.AuthenticationAttributesResult>.value(
              _FakeAuthenticationAttributesResult_1())) as _i4
          .Future<_i2.AuthenticationAttributesResult>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i6.Box<E> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values =>
      (super.noSuchMethod(Invocation.getter(#values), returnValue: <E>[])
          as Iterable<E>);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  bool get isOpen =>
      (super.noSuchMethod(Invocation.getter(#isOpen), returnValue: false)
          as bool);
  @override
  bool get lazy =>
      (super.noSuchMethod(Invocation.getter(#lazy), returnValue: false)
          as bool);
  @override
  Iterable<dynamic> get keys =>
      (super.noSuchMethod(Invocation.getter(#keys), returnValue: <dynamic>[])
          as Iterable<dynamic>);
  @override
  int get length =>
      (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);
  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);
  @override
  bool get isNotEmpty =>
      (super.noSuchMethod(Invocation.getter(#isNotEmpty), returnValue: false)
          as bool);
  @override
  Iterable<E> valuesBetween({dynamic startKey, dynamic endKey}) =>
      (super.noSuchMethod(
          Invocation.method(
              #valuesBetween, [], {#startKey: startKey, #endKey: endKey}),
          returnValue: <E>[]) as Iterable<E>);
  @override
  E? getAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#getAt, [index])) as E?);
  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(Invocation.method(#toMap, []),
      returnValue: <dynamic, E>{}) as Map<dynamic, E>);
  @override
  String toString() => super.toString();
  @override
  dynamic keyAt(int? index) =>
      super.noSuchMethod(Invocation.method(#keyAt, [index]));
  @override
  _i4.Stream<_i6.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
      Invocation.method(#watch, [], {#key: key}),
      returnValue: Stream<_i6.BoxEvent>.empty()) as _i4.Stream<_i6.BoxEvent>);
  @override
  bool containsKey(dynamic key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: false) as bool);
  @override
  _i4.Future<void> put(dynamic key, E? value) =>
      (super.noSuchMethod(Invocation.method(#put, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> putAt(int? index, E? value) =>
      (super.noSuchMethod(Invocation.method(#putAt, [index, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> putAll(Map<dynamic, E>? entries) =>
      (super.noSuchMethod(Invocation.method(#putAll, [entries]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<int> add(E? value) =>
      (super.noSuchMethod(Invocation.method(#add, [value]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<Iterable<int>> addAll(Iterable<E>? values) =>
      (super.noSuchMethod(Invocation.method(#addAll, [values]),
              returnValue: Future<Iterable<int>>.value(<int>[]))
          as _i4.Future<Iterable<int>>);
  @override
  _i4.Future<void> delete(dynamic key) =>
      (super.noSuchMethod(Invocation.method(#delete, [key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#deleteAt, [index]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteAll(Iterable<dynamic>? keys) =>
      (super.noSuchMethod(Invocation.method(#deleteAll, [keys]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> compact() =>
      (super.noSuchMethod(Invocation.method(#compact, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<int> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteFromDisk() =>
      (super.noSuchMethod(Invocation.method(#deleteFromDisk, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}
